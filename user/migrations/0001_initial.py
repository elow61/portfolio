# Generated by Django 4.1.3 on 2022-12-11 16:10

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_display', models.BooleanField(default=False, verbose_name='Is display in website')),
                ('logo', models.ImageField(blank=True, default='default.png', upload_to='media', verbose_name='Logo')),
                ('image', models.ImageField(blank=True, default='default.png', upload_to='media', verbose_name='Image')),
                ('birthday', models.CharField(default='01/01/1990', help_text='The birthday display in the website', max_length=10, verbose_name='Birthday')),
                ('location', models.CharField(default='San Francisco - United States', help_text='The location display in the website.', max_length=40, verbose_name='Location')),
                ('professional_email', models.EmailField(default='example@example.com', help_text='The email display in the website.', max_length=40, verbose_name='Professional email')),
                ('description', models.TextField(default='Define a description here...', help_text='The description adding to about me section.', verbose_name='Description')),
                ('short_description', models.TextField(default='Add a little description...', help_text='The short description adding below the title.', verbose_name='Short description')),
                ('github_link', models.CharField(default='https://github.com', help_text='The Github account URL.', max_length=120, verbose_name='Github link')),
                ('linkedin_link', models.CharField(default='https://linkedin.com', help_text='The LinkedIn account URL.', max_length=120, verbose_name='LinkedIn link')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
